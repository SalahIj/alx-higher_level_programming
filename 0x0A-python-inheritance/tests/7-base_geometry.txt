Checking for module docstring:
         >>> m = __import__("7-base_geometry").__doc__
         >>> len(m) > 1
         True

Checking for class docstring:
         >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
         >>> len(c) > 1
         True

Checking for method docstring:
	  >>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
	  >>> len(mod1) > 1
	  True
	  >>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
          >>> len(mod2) > 1
          True

>>> base_geometry = __import__('7-base_geometry').BaseGeometry
>>> bs = base_geometry()

>>> bs.area(10)
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

>>> bs.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> type(base_geometry.__dict__['integer_validator'])
<class 'function'>

>>> bs.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bs.__class__.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

>>> bs.integer_validator("my_Int", 12)

>>> bs.integer_validator("number", -12)
Traceback (most recent call last):
ValueError: number must be greater than 0

>>> bs.integer_validator("numbers", 0, 1)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> bs.integer_validator("infnumber", int('inf'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'inf'
